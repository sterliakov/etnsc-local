# Part of the pipeline adapted from https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
name: Release

on:
    push:
        tags:
        -   '[0-9]+.[0-9]+.[0-9]+'

permissions:
    contents: read

env:
    DOCKER_USERNAME: sterliakov
    CUSTOM_IMAGE_NAME: electroneum-local

jobs:
    create-release:
        name: create-release
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
        -   uses: actions/checkout@v4
            with:
                persist-credentials: false
        -   name: Get the release version from the tag
            if: env.VERSION == ''
            run: echo "VERSION=$SAFE_VERSION" >>"$GITHUB_ENV"
            env:
                SAFE_VERSION: ${{ github.ref_name }}
        -   name: Show the version
            run: |
                echo "version is: $VERSION"
        -   name: Check that tag version and Cargo.toml version are the same
            shell: bash
            run: |
                if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
                  echo "version does not match Cargo.toml" >&2
                  exit 1
                fi
        -   name: Create GitHub release
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            run: gh release create "$VERSION" --draft --verify-tag --title "$VERSION"
        outputs:
            version: ${{ env.VERSION }}


    push_custom:
        name: Push custom image to Docker Hub
        needs: [create-release]
        runs-on: ubuntu-latest
        permissions:
            contents: read
            id-token: write
        steps:
        -   name: Check out the repo
            uses: actions/checkout@v4
            with:
                persist-credentials: false

        -   name: Log in to Docker Hub
            uses: docker/login-action@v3
            with:
                username: ${{ env.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

        -   name: Build and push Docker image
            id: push
            uses: docker/build-push-action@v6
            with:
                context: ./docker
                push: true
                tags: >
                    ${{ env.DOCKER_USERNAME }}/${{ env.CUSTOM_IMAGE_NAME }}:latest,
                    ${{ env.DOCKER_USERNAME }}/${{ env.CUSTOM_IMAGE_NAME }}:${{ needs.create-release.outputs.version }},
                build-args: |
                    IMAGE_REF=v6.0.0

    build-release:
        name: build-release
        needs: [create-release]
        runs-on: ${{ matrix.os }}
        permissions:
            contents: write
        env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
            CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
            TARGET_FLAGS: ''
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
            TARGET_DIR: ./target
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
            CROSS_VERSION: v0.2.5
      # Emit backtraces on panics.
            RUST_BACKTRACE: 1
        strategy:
            fail-fast: false
            matrix:
                include:
                -   build: linux
                    os: ubuntu-latest
                    rust: nightly
                    target: x86_64-unknown-linux-musl
                    strip: x86_64-linux-musl-strip
                -   build: macos
                    os: macos-latest
                    rust: nightly
                    target: x86_64-apple-darwin
                -   build: win-msvc
                    os: windows-latest
                    rust: nightly
                    target: x86_64-pc-windows-msvc
                -   build: win-gnu
                    os: windows-latest
                    rust: nightly-x86_64-gnu
                    target: x86_64-pc-windows-gnu

        steps:
        -   name: Checkout repository
            uses: actions/checkout@v4
            with:
                persist-credentials: false

        -   name: Install Rust
            uses: dtolnay/rust-toolchain@master
            with:
                toolchain: ${{ matrix.rust }}
                target: ${{ matrix.target }}

        -   name: Use Cross
            if: matrix.os == 'ubuntu-latest' && matrix.target != ''
            shell: bash
            run: |
                # In the past, new releases of 'cross' have broken CI. So for now, we
                # pin it. We also use their pre-compiled binary releases because cross
                # has over 100 dependencies and takes a bit to compile.
                dir="$RUNNER_TEMP/cross-download"
                mkdir "$dir"
                echo "$dir" >>"$GITHUB_PATH"
                cd "$dir"
                curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
                tar xf cross-x86_64-unknown-linux-musl.tar.gz
                echo "CARGO=cross" >>"$GITHUB_ENV"

        -   name: Set target variables
            shell: bash
            run: |
                echo "TARGET_FLAGS=--target ${{ matrix.target }}" >>"$GITHUB_ENV"
                echo "TARGET_DIR=./target/${{ matrix.target }}" >>"$GITHUB_ENV"

        -   name: Show command used for Cargo
            shell: bash
            run: |
                echo "cargo command is: ${{ env.CARGO }}"
                echo "target flag is: ${{ env.TARGET_FLAGS }}"
                echo "target dir is: ${{ env.TARGET_DIR }}"

        -   name: Build release binary
            shell: bash
            run: |
                ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
                if [ "${{ matrix.os }}" = "windows-latest" ]; then
                  bin="target/${{ matrix.target }}/release/etnsc-local.exe"
                else
                  bin="target/${{ matrix.target }}/release/etnsc-local"
                fi
                echo "BIN=$bin" >>"$GITHUB_ENV"

        -   name: Strip release binary (macos)
            if: matrix.os == 'macos-latest'
            shell: bash
            run: strip "$BIN"

        -   name: Strip release binary (cross)
            if: env.CARGO == 'cross'
            shell: bash
            run: |
                docker run --rm -v \
                  "$PWD/target:/target:Z" \
                  "ghcr.io/cross-rs/${{ matrix.target }}:main" \
                  "${{ matrix.strip }}" \
                  "/$BIN"

        -   name: Determine archive name
            shell: bash
            run: |
                echo "ARCHIVE=etnsc-local-$VERSION-${{ matrix.target }}" >>"$GITHUB_ENV"
            env:
                VERSION: ${{ needs.create-release.outputs.version }}

        -   name: Creating directory for archive
            shell: bash
            run: |
                mkdir -p "$ARCHIVE"
                cp "$BIN" "$ARCHIVE"/
                cp {README.md,LICENSE} "$ARCHIVE"/

        -   name: Build archive (Windows)
            shell: bash
            if: matrix.os == 'windows-latest'
            run: |
                7z a "$ARCHIVE.zip" "$ARCHIVE"
                certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
                echo "ASSET=$ARCHIVE.zip" >>"$GITHUB_ENV"
                echo "ASSET_SUM=$ARCHIVE.zip.sha256" >>"$GITHUB_ENV"

        -   name: Build archive (Unix)
            shell: bash
            if: matrix.os != 'windows-latest'
            run: |
                tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
                shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
                echo "ASSET=$ARCHIVE.tar.gz" >>"$GITHUB_ENV"
                echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >>"$GITHUB_ENV"

        -   name: Upload release archive
            shell: bash
            run: |
                gh release upload "$VERSION" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                VERSION: ${{ needs.create-release.outputs.version }}
