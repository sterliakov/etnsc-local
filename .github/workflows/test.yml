name: build

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

permissions:
    contents: read

jobs:
    lint:
        name: Run pre-commit
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v4
            with:
                persist-credentials: false
        -   uses: actions/setup-python@v5
        -   uses: dtolnay/rust-toolchain@stable
            with:
                components: rustfmt, clippy
                toolchain: stable
        -   uses: pre-commit/action@v3.0.1
            env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    test:
        name: Build and test on ${{ matrix.os }}
        runs-on: ${{matrix.os}}-latest
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu, windows, macos]
        steps:
        -   uses: actions/checkout@v4
            with:
                persist-credentials: false
        -   uses: dtolnay/rust-toolchain@stable
            with:
                toolchain: stable
        -   uses: astral-sh/setup-uv@v5

        -   name: Setup yq on windows
            if: ${{ matrix.os == 'windows' }}
            uses: dcarbone/install-yq-action@v1

        # https://github.com/actions/runner/issues/1456
        -   name: Install docker on macos
            if: ${{ matrix.os == 'macos' }}
            run: |
                HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask docker
                open -a /Applications/Docker.app --args --unattended --accept-license
                docker version
                docker compose version

        -   name: Build
            run: cargo build --release

        -   name: Init and start node
            shell: bash
            run: |
                cargo run --release -- init -F

                # Use locally built docker image
                "$yq" -i '.services.electroneum-node.build = {"context": "./docker", "args": {"IMAGE_REF": "v6.0.0"}}' docker-compose.yaml
                docker compose build

                cargo run --release -- start
            env:
                yq: ${{ matrix.os == 'windows' && 'yq.exe' || 'yq' }}
        -   name: Check node status
            run: cargo run --release -- status | grep healthy

        -   name: Run quick node test
            run: uv run --script test/test_node.py

        -   name: Reset and run again
            run: |
                cargo run --release -- reset
                uv run --script test/test_node.py

        -   name: Stop node
            if: success() || failure()
            run: cargo run --release -- stop
